name: Tests and Quality Checks

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ develop, staging ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage flake8
        
    - name: Set up environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-testing-$(date +%s)" >> $GITHUB_ENV
        echo "DEBUG=1" >> $GITHUB_ENV
        echo "DATABASE_ENGINE=django.db.backends.sqlite3" >> $GITHUB_ENV
        echo "DATABASE_NAME=:memory:" >> $GITHUB_ENV
        echo "ALLOWED_HOSTS=127.0.0.1,localhost" >> $GITHUB_ENV
        echo "CSRF_TRUSTED_ORIGINS=http://127.0.0.1,http://localhost" >> $GITHUB_ENV

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Run Django system checks
      run: |
        python manage.py check
        
    - name: Check for missing migrations
      run: |
        python manage.py makemigrations --check --dry-run
        
    - name: Run tests with coverage
      run: |
        coverage run --source='.' manage.py test --parallel --keepdb
        coverage report --skip-covered
        coverage xml
        
    - name: Upload coverage to Codecov (optional)
      if: github.event_name == 'pull_request'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Check for security vulnerabilities in dependencies
      run: |
        safety check --json || true
        
    - name: Run bandit security linter
      run: |
        bandit -r . -x venv,tests -f json || true